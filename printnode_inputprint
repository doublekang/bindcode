<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF to PrintNode Tool</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
            background-color: #f9f9f9;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, textarea {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            margin-bottom: 10px;
        }
        input[readonly] {
            background-color: #f0f0f0;
            color: #555;
        }
        button {
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 4px;
            margin-right: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        pre {
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
        }
        .result {
            margin-top: 20px;
            display: none;
        }
        .success {
            color: green;
            font-weight: bold;
        }
        .error {
            color: red;
            font-weight: bold;
        }
        textarea {
            width: 100%;
            height: 150px;
            resize: vertical;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>PDF Generation & Printing Tool</h1>
        
        <!-- PDF Content Entry Section -->
        <div>
            <div class="form-group">
                <label for="pdfContent">Enter Content for PDF:</label>
                <textarea id="pdfContent" placeholder="Enter the content that will be converted to PDF..."></textarea>
            </div>
            
            <div class="form-group">
                <button id="generateBtn">Generate PDF</button>
            </div>
        </div>
        
        <!-- PDF Preview -->
        <div id="pdfPreviewContainer" class="result">
            <h3>PDF Preview</h3>
            <iframe id="pdfPreview" style="width:100%; height:400px; border:1px solid #ddd;"></iframe>
        </div>
    </div>
    
    <!-- GitHub Upload Section -->
    <div class="container">
        <h2>GitHub Repository Information</h2>
        <div class="form-group">
            <label for="githubToken">GitHub Token:</label>
            <input type="text" id="githubToken" value="_ZuQabnRrszH2SkaysWXSdat8fep3Ki0yDKxr" readonly>
        // add ghp before_
        </div>
        
        <div class="form-group">
            <label for="repoName">Repository Name:</label>
            <input type="text" id="repoName" value="doublekang/bindcode/" readonly>
        </div>
        
        <div class="form-group">
            <label for="filePath">File Path:</label>
            <input type="text" id="filePath" readonly>
        </div>
        
        <div class="form-group">
            <button id="uploadBtn">Upload to GitHub</button>
        </div>
        
        <div id="githubResult" class="result">
            <h3>GitHub Upload Result</h3>
            <pre id="githubResponse"></pre>
        </div>
    </div>
    
    <!-- PrintNode Section -->
    <div class="container">
        <h2>PrintNode Configuration</h2>
        <div class="form-group">
            <label for="printNodeApiKey">PrintNode API Key:</label>
            <input type="text" id="printNodeApiKey" value="k_U1gCrcax90Sgu9z9AJKuaNZ1SMVgRdovBaOCLKYnw" readonly>
        </div>
        
        <div class="form-group">
            <label for="printNodePrinterId">PrintNode Printer ID:</label>
            <input type="text" id="printNodePrinterId" value="74168181" readonly>
        </div>
        
        <div class="form-group">
            <button id="printBtn">Send to Printer</button>
        </div>
        
        <div id="printResult" class="result">
            <h3>Print Job Result</h3>
            <pre id="printResponse"></pre>
        </div>
    </div>
    
    <script>
        // Global variable to store PDF as base64
        let pdfBase64Data = null;
        
        // Generate file path using current date (yymmdd) + 2 digit running number
        function generateFilePath() {
            const now = new Date();
            const year = now.getFullYear().toString().slice(-2);
            const month = (now.getMonth() + 1).toString().padStart(2, '0');
            const day = now.getDate().toString().padStart(2, '0');
            const dateString = year + month + day;
            const runningNumber = '01'; // Fixed running number (would be dynamic in real implementation)
            return dateString + runningNumber + '.pdf';
        }
        
        // Set the file path when the page loads
        document.getElementById('filePath').value = generateFilePath();
        
        // Generate PDF from text content
        document.getElementById('generateBtn').addEventListener('click', function() {
            const content = document.getElementById('pdfContent').value;
            
            if (!content.trim()) {
                alert('Please enter content for the PDF');
                return;
            }
            
            try {
                // Create PDF using jsPDF
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                // Add content with wrapping
                const textLines = doc.splitTextToSize(content, 180);
                doc.text(textLines, 15, 15);
                
                // Convert to base64 data URI
                const dataUri = doc.output('datauristring');
                
                // Display preview
                document.getElementById('pdfPreview').src = dataUri;
                document.getElementById('pdfPreviewContainer').style.display = 'block';
                
                // Store base64 data without the prefix
                pdfBase64Data = dataUri.split(',')[1];
                
                console.log('PDF generated successfully');
            } catch (error) {
                console.error('Error generating PDF:', error);
                alert('Error generating PDF: ' + error.message);
            }
        });
        
        // Upload to GitHub - Real API call
        document.getElementById('uploadBtn').addEventListener('click', function() {
            if (!pdfBase64Data) {
                alert('Please generate a PDF first');
                return;
            }
            
            const token = document.getElementById('githubToken').value;
            const repoFullName = document.getElementById('repoName').value.replace(/\/$/, ''); // Remove trailing slash if present
            const path = document.getElementById('filePath').value;
            
            // Show loading status
            document.getElementById('githubResult').style.display = 'block';
            document.getElementById('githubResponse').textContent = 'Uploading to GitHub...';
            
            // Extract owner and repo from the repository name
            const [owner, repo] = repoFullName.split('/');
            
            // First, check if the file already exists to get the SHA if it does
            fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            })
            .then(response => {
                let sha = null;
                
                // If the file exists, get its SHA for the update
                if (response.ok) {
                    return response.json().then(data => {
                        sha = data.sha;
                        return sha;
                    });
                }
                return sha; // Return null if file doesn't exist
            })
            .then(sha => {
                // Prepare the request body
                const requestBody = {
                    message: `Upload PDF document ${path}`,
                    content: pdfBase64Data
                };
                
                // If file exists, include the SHA for update
                if (sha) {
                    requestBody.sha = sha;
                }
                
                // Create or update the file
                return fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    body: JSON.stringify(requestBody)
                });
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(`GitHub API error: ${errorData.message}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                // Success response
                const successResponse = {
                    success: true,
                    message: "File uploaded successfully to GitHub!",
                    content: {
                        name: data.content.name,
                        path: data.content.path,
                        sha: data.content.sha,
                        size: data.content.size,
                        url: data.content.html_url || `https://github.com/${repoFullName}/blob/main/${path}`
                    },
                    commit: {
                        message: data.commit.message,
                        sha: data.commit.sha,
                        url: data.commit.html_url
                    }
                };
                
                document.getElementById('githubResponse').textContent = JSON.stringify(successResponse, null, 2);
            })
            .catch(error => {
                // Error response
                const errorResponse = {
                    success: false,
                    error: error.message,
                    details: "There was an error uploading to GitHub. Check the console for more details."
                };
                
                console.error('GitHub upload error:', error);
                document.getElementById('githubResponse').textContent = JSON.stringify(errorResponse, null, 2);
            });
        });
        
        // Print via PrintNode - Real API call
        document.getElementById('printBtn').addEventListener('click', function() {
            if (!pdfBase64Data) {
                alert('Please generate a PDF first');
                return;
            }
            
            const apiKey = document.getElementById('printNodeApiKey').value;
            const printerId = document.getElementById('printNodePrinterId').value;
            
            // Show loading status
            document.getElementById('printResult').style.display = 'block';
            document.getElementById('printResponse').textContent = 'Sending to PrintNode...';
            
            // Prepare the print job data
            const printJobData = {
                printerId: parseInt(printerId),
                contentType: 'pdf_base64',
                content: pdfBase64Data,
                source: 'PDF Web Tool'
            };
            
            // Send the print job to PrintNode
            fetch('https://api.printnode.com/printjobs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Basic ' + btoa(apiKey + ':')
                },
                body: JSON.stringify(printJobData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(`PrintNode API error: ${errorData.message || 'Unknown error'}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                // Success response
                const successResponse = {
                    success: true,
                    message: "Print job successfully sent to PrintNode!",
                    printJobId: data,
                    printer: {
                        id: printerId
                    },
                    timestamp: new Date().toISOString()
                };
                
                document.getElementById('printResponse').textContent = JSON.stringify(successResponse, null, 2);
            })
            .catch(error => {
                // Error response
                const errorResponse = {
                    success: false,
                    error: error.message,
                    details: "There was an error sending the print job to PrintNode. Check the console for more details."
                };
                
                console.error('PrintNode error:', error);
                document.getElementById('printResponse').textContent = JSON.stringify(errorResponse, null, 2);
            });
        });
    </script>
</body>
</html>
